{
	"version": 0.1,
	"transformation-sets": {
		"src-transform": {
			"db": {
				"src.db": "$db_jira_import",
				"dest.db": "$db_scrum_transform"
			},
			"transformations": {
				"components": {
					"class": "ext.transformations.TransposeToArrayTransformation",
					"cfg": {
						"src.collection": "components",
						"dest.collection": "project.components",
						"transformation": {
								"key": "project",
								"values": "component"
						}								
					}
				},
				"employees": {
					"class": "ext.transformations.DatasetTransformation",
					"cfg": {
						"src.collection": "employees",
						"dest.collection": "project.employees"
					}
				},				
				"sprint-timeline": {
					"class": "ext.transformations.SingleObjectTransformation",
					"cfg": {
						"src.collection": "sprint",
						"dest.collection": "sprint.timeline",
						"transformation": {
							"timeline": "obj['timeline'] = pd.date_range(obj['startDate'], obj['endDate']).tolist()"
						},
						"fields": ["timeline"]
					}
				},
				"sprint-definition": {
					"class": "ext.transformations.SingleObjectTransformation",
					"cfg": {
						"src.collection": "sprint",
						"dest.collection": "sprint.definition"					
					}
				},
				"sprint-all_items": {
					"class": "ext.transformations.DatasetTransformation",
					"cfg": {
						"src.collection": "backlog",
						"dest.collection": "sprint.all_items",
						"transformation": {
							"transform_values": {
								"sec2hrs": "row['estimate'] = row['estimate']/3600 if row['estimate'] else 0"
							}
						}						
					}
				}
			}
		},
		"int-transform": {
			"db": {
				"src.db": "$db_scrum_transform",
				"dest.db": "$db_scrum_transform"
			},
			"transformations": {
				"components": {
					"class": "ext.transformations.SingleObjectTransformation",
					"cfg": {
						"src.collection": "project.components",
						"dest.collection": "project.components",
						"fields": ["component"]
					}
				},			
				"blocked_by": {
					"class": "ext.transformations.TransposeFromArrayTransformation",
					"cfg": {
						"src.collection": "sprint.all_items",
						"dest.collection": "sprint.idx_blocked_by",
						"transformation": {
							"key": "key",
							"values": "blocked_by"
						}
					}
				},
				"assignments": {
					"class": "ext.transformations.TransposeFromArrayTransformation",
					"cfg": {
						"src.collection": "sprint.all_items",
						"dest.collection": "sprint.idx_assignments",
						"transformation": {
							"key": "key",
							"values": "assignments"
						}
					}
				}				
			}
		},
		"dest-transform": {
			"db": {
				"src.db": "$db_scrum_transform",
				"dest.db": "$db_scrum_api"
			},
			"transformations": {
				"components": {
					"class": "ext.transformations.DatasetTransformation",
					"cfg": {
						"src.collection": "project.components",
						"dest.collection": "project.components"
					}
				},
				"employees": {
					"class": "ext.transformations.DatasetTransformation",
					"cfg": {
						"src.collection": "project.employees",
						"dest.collection": "project.employees"
					}
				},
				"sprint.definition": {
					"class": "ext.transformations.SingleObjectTransformation",
					"cfg": {
						"src.collection": "sprint.definition",
						"dest.collection": "sprint.definition"						
					}
				},
				"sprint.timeline": {
					"class": "ext.transformations.SingleObjectTransformation",
					"cfg": {
						"src.collection": "sprint.timeline",
						"dest.collection": "sprint.timeline"						
					}
				},
				"backlog": {
					"class": "ext.transformations.DatasetTransformation",
					"cfg": {
						"src.collection": "sprint.all_items",
						"dest.collection": "sprint.backlog",
						"transformation": {
							"where": "type == 'Story' or type == 'Bug' or type == 'Sub-task'",
							"order": {
								"by_column": "priority",
								"sort_order": ["Highest", "High", "Medium", "Low", "Lowest"]
							}
						},
						"fields": ["key", "parent", "type", "priority", "status", "assignee_id", "duedate", "estimate", "components", "blocked_by", "blocks"]
					}
				},
				"assignments": {
					"class": "ext.transformations.DatasetTransformation",
					"cfg": {
						"src.collection": "sprint.idx_assignments",
						"dest.collection": "sprint.assignments",
						"transformation": {
							"regex": {
								"pattern": "^(\\S+-\\d+){1}_(\\S+-\\d+){0,1}_(\\d{4}-\\d{2}-\\d{2})_(\\S+)_(\\S+)_(\\d+(\\.\\d{1,2})*)_(\\S*)$",
								"input": "assignments"
							},
							"transform_values": {
								"parent": "row['parent'] = regex[1] if regex[1] != '' else None",
								"date": "row['date'] = datetime.datetime.strptime(regex[2], '%Y-%m-%d')", 
								"group": "row['group'] = regex[3]",
								"employee": "row['employee'] = regex[4]",
								"whrs": "row['whrs'] = regex[5]",
								"comment": "row['comment'] = regex[7]"
							}
						},	
						"fields": ["key", "parent", "date", "group", "employee", "whrs", "comment"]
					}
				}				
			}
		}
	}
}
